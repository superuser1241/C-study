using Oracle.ManagedDataAccess.Client;
using System;

namespace MyProject001
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string strConn = "Data Source=(DESCRIPTION=" +
                "(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)" +
                "(HOST=localhost)(PORT=1521)))" +
                "(CONNECT_DATA=(SERVER=DEDICATED)" +
                "(SERVICE_NAME=xe)));" +
                "User Id=hr;Password=hr;";

            //1.연결 객체 만들기 - Client
            OracleConnection conn = new OracleConnection(strConn);

            //2.데이터베이스 접속을 위한 연결
            conn.Open();

            //3.서버와 함께 신나게 놀기
            //3.1 Query 명령객체 만들기
            OracleCommand cmd = new OracleCommand();
            cmd.Connection = conn; //연결객체와 연동

            while (true)
            {
                Console.WriteLine("1. 테이블 만들기");
                Console.WriteLine("2. 테이블 삭제");
                Console.WriteLine("3. 데이터 삽입");
                Console.WriteLine("4. 데이터 삭제");
                Console.WriteLine("5. 데이터 수정");
                Console.WriteLine("6. 데이터 검색");
                Console.WriteLine("7. 프로그램 종료");
                Console.WriteLine("--------------------");
                int a = int.Parse(Console.ReadLine());

                switch (a)
                {
                    case 1:
                        //3.2 명령하기, 테이블 생성하기
                        cmd.CommandText = "Create Table BEST_GOAL_SCORE" +
                            "(RANK number(3) PRIMARY KEY, " +
                             "NAME varchar2(20), " +
                            "TEAM varchar2(20), " +
                            "GAME number(3), " +
                            "GOAL number(3))";

                        cmd.ExecuteNonQuery();

                        Console.WriteLine("테이블이 생성되었습니다.");
                        break;

                    case 2:
                        Console.WriteLine();
                        cmd.CommandText = "drop table BEST_GOAL_SCORE";
                        try
                        {
                            cmd.ExecuteNonQuery();
                            Console.WriteLine("테이블이 삭제되었습니다.");
                        }
                        catch
                        {
                            Console.WriteLine("테이블이 없습니다.");
                        }
                        break;

                    case 3:
                        Console.WriteLine();
                        Console.WriteLine("골 순위를 입력해주세요.");
                        int rank = int.Parse(Console.ReadLine());

                        Console.WriteLine("선수 이름을 입력해주세요");
                        string name = Console.ReadLine();

                        Console.WriteLine("팀 이름을 입력해주세요.");
                        string team = Console.ReadLine();

                        Console.WriteLine("게임 수를 입력해주세요.");
                        int game = int.Parse(Console.ReadLine());

                        Console.WriteLine("골 수를 입력해주세요.");
                        int goal = int.Parse(Console.ReadLine());

                        cmd.CommandText = $"INSERT INTO BEST_GOAL_SCORE VALUES ({rank},'{name}','{team}',{game},{goal})";

                        cmd.ExecuteNonQuery();
                        Console.WriteLine("데이터가 삽입되었습니다.");
                        break;

                    case 4:
                        Console.WriteLine();
                        Console.Write("삭제할 데이터의 골 순위를 입력해주세요: ");
                        int ranking = int.Parse(Console.ReadLine());
                        cmd.CommandText = $"DELETE FROM BEST_GOAL_SCORE WHERE RANK = {ranking}";
                        cmd.ExecuteNonQuery();
                        Console.WriteLine("데이터가 삭제되었습니다.");
                        break;

                    case 5:
                        Console.WriteLine();
                        Console.Write("수정할 골 순위를 입력해주세요: ");
                        int newRank= int.Parse(Console.ReadLine());

                        Console.WriteLine("새로운 선수 이름을 입력해주세요: ");
                        string newName = Console.ReadLine();

                        Console.WriteLine("새로운 팀 이름을 입력해주세요: ");
                        string newTeam = Console.ReadLine();

                        Console.WriteLine("새로운 게임 수를 입력해주세요: ");
                        int newGame = int.Parse(Console.ReadLine());

                        Console.WriteLine("새로운 골 수를 입력해주세요: ");
                        int newGoal = int.Parse(Console.ReadLine());

                        cmd.CommandText = $"UPDATE BEST_GOAL_SCORE SET NAME='{newName}', TEAM='{newTeam}', GAME={newGame}, GOAL={newGoal} WHERE RANK={newRank}";
                        cmd.ExecuteNonQuery();
                        Console.WriteLine("데이터가 수정되었습니다.");
                        break;

                    case 6:
                        Console.WriteLine();
                        Console.Write("검색할 데이터의 골 순위를 입력해주세요: ");
                        int Search = int.Parse(Console.ReadLine());
                        cmd.CommandText = $"SELECT * FROM BEST_GOAL_SCORE WHERE RANK={Search}";

                        OracleDataReader reader = cmd.ExecuteReader();
                        while (reader.Read())
                        {
                            int searchedRank = int.Parse(reader["RANK"].ToString());
                            string searchedName = reader["NAME"].ToString();
                            string searchedTeam = reader["TEAM"].ToString();
                            int searchedGame = int.Parse(reader["GAME"].ToString());
                            int searchedGoal = int.Parse(reader["GOAL"].ToString());

                            Console.WriteLine($"RANK: {searchedRank}, NAME: {searchedName}, TEAM: {searchedTeam}, GAME: {searchedGame}, GOAL: {searchedGoal}");
                        }
                        reader.Close();
                        break;

                    case 7:
                        conn.Close();
                        Environment.Exit(0);
                        break;

                    default:
                        break;
                }
            }
        }
    }
}
